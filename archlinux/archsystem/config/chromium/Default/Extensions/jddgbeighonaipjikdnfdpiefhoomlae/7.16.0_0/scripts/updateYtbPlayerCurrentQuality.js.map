{"version":3,"file":"scripts/updateYtbPlayerCurrentQuality.js","mappings":"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","sources":["webpack://vpnn-extension/./scripts/updateYtbPlayerCurrentQuality.ts"],"sourcesContent":["/**\n * Этот файл компилируется в js стандарными инструментами ts\n * поэтому в нем не должно быть импортов или экспортов\n *\n * Типы указанные в этом файле должны дублировать типы\n * указанные в файлe src/content/scripts/youtubeRestrictionQuality/ytbRestrictionQuality.ts\n */\n\nconst YTB_LOCAL_STORAGE_QUALITY_KEY = 'yt-player-quality';\nconst YTB_SCRIPT_SOURCE = 'ytb-quality-script';\nconst YTB_PLAYER_ID = 'movie_player';\nconst DEFAULT_QUALITY = 'hd1080' as YTbQualityLevel;\nconst ENFORCING_QUALITY_CHECK_INTERVAL = 60000; //1 minute\n\nenum YTbPlayerActions {\n  'set-quality' = 'SET_QUALITY',\n  'stop-restrict-quality' = 'STOP_RESTRICT_QUALITY',\n}\n\nconst chosenQualityMap: Record<string, YTbQualityLevel> = {\n  '1080': 'hd1080',\n  '720': 'hd720',\n  '480': 'large',\n  '360': 'medium',\n  '240': 'small',\n  '144': 'tiny',\n};\n\ntype YTbQualityLevel =\n  | 'highres'\n  | 'hd2880'\n  | 'hd2160'\n  | 'hd1440'\n  | 'hd1080'\n  | 'hd720'\n  | 'large'\n  | 'medium'\n  | 'small'\n  | 'tiny'\n  | 'auto';\n\nconst qualityOrder: Array<YTbQualityLevel> = [\n  'hd1080',\n  'hd720',\n  'large',\n  'medium',\n  'small',\n  'tiny',\n];\n\ninterface YTbPlayer {\n  // Качество\n  getAvailableQualityLevels(): YTbQualityLevel[];\n  setPlaybackQuality(quality: YTbQualityLevel): void;\n  setPlaybackQualityRange?(quality: YTbQualityLevel): void;\n  getPlaybackQuality(): YTbQualityLevel;\n\n  addEventListener?(event: string, handler: (...args: any[]) => void): void;\n\n  // Прочее (по необходимости)\n  [key: string]: any;\n}\n\ntype GlobalStateType = {\n  /** Текущее выбранное качество */\n  chosenQuality: YTbQualityLevel | null;\n  /** ID интервала */\n  enforceIntervalId: number | null;\n  /** Ссылка на плеер */\n  playerRef: YTbPlayer | null;\n};\n\nconst globalState: GlobalStateType = {\n  chosenQuality: null,\n  enforceIntervalId: null,\n  playerRef: null,\n};\n\nfunction getPlayer(): YTbPlayer | null {\n  const player = document.getElementById(YTB_PLAYER_ID) as unknown as YTbPlayer;\n  if (player && typeof player.getAvailableQualityLevels === 'function') {\n    return player;\n  }\n  return null;\n}\n\nfunction updatePlayer() {\n  const newPlayer = getPlayer();\n\n  if (!newPlayer) return null;\n\n  if (globalState.playerRef !== newPlayer) {\n    globalState.playerRef = newPlayer;\n    console.warn('[Ytb Enforcer] Player found or replaced');\n\n    globalState.playerRef.addEventListener?.(\n      'onPlaybackQualityChange',\n      enforceQuality,\n    );\n  }\n\n  return globalState.playerRef;\n}\n\nfunction selectBestQuality(\n  available: YTbQualityLevel[],\n): YTbQualityLevel | null {\n  const qualitiesWithoutAuto = available.filter(\n    (quality) => !quality.startsWith('auto'),\n  );\n\n  const allowedQualities = qualitiesWithoutAuto.filter((quality) => {\n    const index = qualityOrder.indexOf(quality);\n\n    return index !== -1 && index <= qualityOrder.indexOf(DEFAULT_QUALITY);\n  });\n\n  const best = qualityOrder.find((quality) =>\n    allowedQualities.includes(quality),\n  );\n\n  return best ?? null;\n}\n\nfunction getQualityIndex(quality: YTbQualityLevel | null | undefined): number {\n  if (!quality) return -1;\n\n  return qualityOrder.indexOf(quality);\n}\n\nfunction setQuality(quality: YTbQualityLevel) {\n  globalState.chosenQuality = quality;\n  globalState.playerRef?.setPlaybackQuality?.(quality);\n  globalState.playerRef?.setPlaybackQualityRange?.(quality);\n  startEnforcing();\n}\n\nfunction handleQualityFromLocalStorage(\n  qualities: YTbQualityLevel[],\n): YTbQualityLevel | null {\n  try {\n    const rawData = localStorage.getItem(YTB_LOCAL_STORAGE_QUALITY_KEY);\n\n    if (!rawData) return null;\n\n    const rawDataParsed = JSON.parse(rawData)?.data;\n\n    if (typeof rawDataParsed !== 'string') {\n      return null;\n    }\n\n    const qualityRaw = JSON.parse(rawDataParsed)?.quality;\n    const mappedQuality = chosenQualityMap[qualityRaw] ?? qualityRaw;\n\n    return qualities.includes(mappedQuality) ? mappedQuality : null;\n  } catch (error) {\n    console.warn('Error parsing storage quality data', error);\n    return null;\n  }\n}\n\nwindow.addEventListener('message', (event) => {\n  if (\n    event.source !== window ||\n    !event.data ||\n    event.data.source !== YTB_SCRIPT_SOURCE\n  ) {\n    return;\n  }\n\n  const player = updatePlayer();\n\n  if (!player) return;\n\n  if (event.data.type === YTbPlayerActions['set-quality']) {\n    const qualities = player.getAvailableQualityLevels?.() || [];\n    const current = player.getPlaybackQuality();\n\n    const chosen = handleQualityFromLocalStorage(qualities);\n    const chosenIndex = getQualityIndex(chosen);\n\n    const best = selectBestQuality(qualities);\n\n    const desired = chosen && chosenIndex !== -1 ? chosen : best;\n\n    if (desired && (desired !== current || !globalState.enforceIntervalId)) {\n      setQuality(desired);\n    }\n  }\n\n  if (event.data.type === YTbPlayerActions['stop-restrict-quality']) {\n    stopEnforcing();\n    globalState.chosenQuality = null;\n  }\n});\n\nfunction enforceQuality() {\n  const { playerRef, chosenQuality } = globalState;\n\n  if (!playerRef || !chosenQuality) return;\n\n  const current = playerRef.getPlaybackQuality() || DEFAULT_QUALITY;\n  const currentIndex = qualityOrder.indexOf(current);\n\n  if (currentIndex === -1) {\n    playerRef.setPlaybackQuality?.(chosenQuality);\n    playerRef.setPlaybackQualityRange?.(chosenQuality);\n    console.warn(\n      `[Ytb Enforcer] Reverted quality from ${current} to ${chosenQuality}`,\n    );\n  }\n}\n\nfunction startEnforcing() {\n  if (globalState.enforceIntervalId !== null) return;\n\n  globalState.enforceIntervalId = window.setInterval(\n    enforceQuality,\n    ENFORCING_QUALITY_CHECK_INTERVAL,\n  );\n  console.warn('[Ytb Enforcer] Started quality enforcement');\n}\n\nfunction stopEnforcing() {\n  const { enforceIntervalId } = globalState;\n\n  if (enforceIntervalId !== null) {\n    clearInterval(enforceIntervalId);\n    globalState.enforceIntervalId = null;\n    console.warn('[Ytb Enforcer] Stopped quality enforcement');\n  }\n}\n"],"names":["DEFAULT_QUALITY","chosenQualityMap","qualityOrder","globalState","chosenQuality","enforceIntervalId","playerRef","enforceQuality","current","getPlaybackQuality","indexOf","setPlaybackQuality","setPlaybackQualityRange","console","warn","window","addEventListener","event","source","data","player","newPlayer","document","getElementById","getAvailableQualityLevels","getPlayer","updatePlayer","type","qualities","chosen","JSON","rawData","localStorage","getItem","rawDataParsed","parse","qualityRaw","quality","mappedQuality","includes","error","handleQualityFromLocalStorage","chosenIndex","best","available","allowedQualities","filter","startsWith","index","find","selectBestQuality","desired","setInterval","setQuality","clearInterval","stopEnforcing"],"sourceRoot":""}